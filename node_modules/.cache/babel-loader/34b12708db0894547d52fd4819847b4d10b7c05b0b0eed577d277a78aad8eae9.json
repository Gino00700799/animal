{"ast":null,"code":"// Professional cattle nutrition data based on weight and growth phases\nexport const cattleNutritionData = [{\n  gewichtKg: 200,\n  tmKg: 5.0,\n  tdnKg: 2.8,\n  dcpKg: 0.24,\n  phase: \"Kalb / Jungtier\",\n  description: \"Wachstumsphase mit hohem Proteinbedarf\",\n  ageMonths: \"6-10 Monate\"\n}, {\n  gewichtKg: 300,\n  tmKg: 7.5,\n  tdnKg: 4.2,\n  dcpKg: 0.36,\n  phase: \"Jungrind / frühe Mast\",\n  description: \"Intensive Wachstumsphase\",\n  ageMonths: \"10-14 Monate\"\n}, {\n  gewichtKg: 400,\n  tmKg: 10.0,\n  tdnKg: 5.6,\n  dcpKg: 0.48,\n  phase: \"Fortgeschrittene Mast\",\n  description: \"Kontinuierliche Gewichtszunahme\",\n  ageMonths: \"14-18 Monate\"\n}, {\n  gewichtKg: 500,\n  tmKg: 12.5,\n  tdnKg: 7.0,\n  dcpKg: 0.60,\n  phase: \"Mastbulle mittlere Endphase\",\n  description: \"Optimale Fleischqualität entwickeln\",\n  ageMonths: \"18-22 Monate\"\n}, {\n  gewichtKg: 600,\n  tmKg: 15.0,\n  tdnKg: 8.4,\n  dcpKg: 0.72,\n  phase: \"Hochleistungs-Mastbulle\",\n  description: \"Maximale Gewichtszunahme\",\n  ageMonths: \"22-26 Monate\"\n}, {\n  gewichtKg: 700,\n  tmKg: 17.5,\n  tdnKg: 9.8,\n  dcpKg: 0.84,\n  phase: \"Schlachtreife Bullen / Charolais\",\n  description: \"Endmast für optimale Schlachtqualität\",\n  ageMonths: \"26+ Monate\"\n}];\n\n// Function to get nutrition data for specific weight\nexport const getCattleNutritionForWeight = weight => {\n  // Find the closest weight match\n  let closest = cattleNutritionData[0];\n  let minDiff = Math.abs(weight - closest.gewichtKg);\n  for (const data of cattleNutritionData) {\n    const diff = Math.abs(weight - data.gewichtKg);\n    if (diff < minDiff) {\n      minDiff = diff;\n      closest = data;\n    }\n  }\n\n  // If weight is between two values, interpolate\n  if (weight !== closest.gewichtKg) {\n    const sortedData = [...cattleNutritionData].sort((a, b) => a.gewichtKg - b.gewichtKg);\n    for (let i = 0; i < sortedData.length - 1; i++) {\n      const lower = sortedData[i];\n      const upper = sortedData[i + 1];\n      if (weight >= lower.gewichtKg && weight <= upper.gewichtKg) {\n        const ratio = (weight - lower.gewichtKg) / (upper.gewichtKg - lower.gewichtKg);\n        return {\n          gewichtKg: weight,\n          tmKg: Math.round((lower.tmKg + (upper.tmKg - lower.tmKg) * ratio) * 10) / 10,\n          tdnKg: Math.round((lower.tdnKg + (upper.tdnKg - lower.tdnKg) * ratio) * 10) / 10,\n          dcpKg: Math.round((lower.dcpKg + (upper.dcpKg - lower.dcpKg) * ratio) * 100) / 100,\n          phase: weight <= 350 ? lower.phase : upper.phase,\n          description: weight <= 350 ? lower.description : upper.description,\n          ageMonths: weight <= 350 ? lower.ageMonths : upper.ageMonths,\n          interpolated: true\n        };\n      }\n    }\n  }\n  return closest;\n};\n\n// Function to calculate feed requirements\nexport const calculateCattleFeedRequirements = (weight, nutritionData) => {\n  const {\n    tmKg,\n    tdnKg,\n    dcpKg\n  } = nutritionData;\n\n  // Convert to different feed types\n  const feedRequirements = {\n    // Trockenmasse gesamt\n    totalDryMatter: tmKg,\n    // Heu (ca. 85% TM, 50% TDN, 8% Rohprotein)\n    hayKg: Math.round(tmKg * 0.6 * 10) / 10,\n    // Kraftfutter (ca. 88% TM, 75% TDN, 16% Rohprotein)\n    concentrateKg: Math.round(tmKg * 0.4 * 10) / 10,\n    // Silage (ca. 35% TM, 65% TDN, 12% Rohprotein)\n    silageKg: Math.round(tmKg / 0.35 * 10) / 10,\n    // Wasser (ca. 3-4 Liter pro kg TM)\n    waterLiters: Math.round(tmKg * 3.5),\n    // Energiebedarf in MJ ME (Metabolizable Energy)\n    energyMJ: Math.round(tdnKg * 18.4),\n    // 1 kg TDN ≈ 18.4 MJ ME\n\n    // Proteinbedarf\n    proteinKg: dcpKg,\n    // Tägliche Kosten (grobe Schätzung)\n    dailyCostEuro: Math.round((tmKg * 0.25 + dcpKg * 2.5) * 100) / 100\n  };\n  return feedRequirements;\n};\n\n// Nutrition explanations\nexport const nutritionExplanations = {\n  tm: {\n    name: \"Trockenmasse (TM)\",\n    description: \"Gesamtmenge an Futter ohne Wassergehalt\",\n    unit: \"kg/Tag\",\n    importance: \"Basis für alle Futterberechnungen\"\n  },\n  tdn: {\n    name: \"Total Digestible Nutrients (TDN)\",\n    description: \"Verdauliche Nährstoffe für Energieversorgung\",\n    unit: \"kg/Tag\",\n    importance: \"Energiequelle für Wachstum und Erhaltung\"\n  },\n  dcp: {\n    name: \"Digestible Crude Protein (DCP)\",\n    description: \"Verdauliches Rohprotein für Muskelaufbau\",\n    unit: \"kg/Tag\",\n    importance: \"Essentiell für Wachstum und Fleischqualität\"\n  }\n};","map":{"version":3,"names":["cattleNutritionData","gewichtKg","tmKg","tdnKg","dcpKg","phase","description","ageMonths","getCattleNutritionForWeight","weight","closest","minDiff","Math","abs","data","diff","sortedData","sort","a","b","i","length","lower","upper","ratio","round","interpolated","calculateCattleFeedRequirements","nutritionData","feedRequirements","totalDryMatter","hayKg","concentrateKg","silageKg","waterLiters","energyMJ","proteinKg","dailyCostEuro","nutritionExplanations","tm","name","unit","importance","tdn","dcp"],"sources":["/Users/ginoanayamendoza/client/src/data/cattleNutrition.js"],"sourcesContent":["// Professional cattle nutrition data based on weight and growth phases\nexport const cattleNutritionData = [\n  { \n    gewichtKg: 200, \n    tmKg: 5.0, \n    tdnKg: 2.8, \n    dcpKg: 0.24, \n    phase: \"Kalb / Jungtier\",\n    description: \"Wachstumsphase mit hohem Proteinbedarf\",\n    ageMonths: \"6-10 Monate\"\n  },\n  { \n    gewichtKg: 300, \n    tmKg: 7.5, \n    tdnKg: 4.2, \n    dcpKg: 0.36, \n    phase: \"Jungrind / frühe Mast\",\n    description: \"Intensive Wachstumsphase\",\n    ageMonths: \"10-14 Monate\"\n  },\n  { \n    gewichtKg: 400, \n    tmKg: 10.0, \n    tdnKg: 5.6, \n    dcpKg: 0.48, \n    phase: \"Fortgeschrittene Mast\",\n    description: \"Kontinuierliche Gewichtszunahme\",\n    ageMonths: \"14-18 Monate\"\n  },\n  { \n    gewichtKg: 500, \n    tmKg: 12.5, \n    tdnKg: 7.0, \n    dcpKg: 0.60, \n    phase: \"Mastbulle mittlere Endphase\",\n    description: \"Optimale Fleischqualität entwickeln\",\n    ageMonths: \"18-22 Monate\"\n  },\n  { \n    gewichtKg: 600, \n    tmKg: 15.0, \n    tdnKg: 8.4, \n    dcpKg: 0.72, \n    phase: \"Hochleistungs-Mastbulle\",\n    description: \"Maximale Gewichtszunahme\",\n    ageMonths: \"22-26 Monate\"\n  },\n  { \n    gewichtKg: 700, \n    tmKg: 17.5, \n    tdnKg: 9.8, \n    dcpKg: 0.84, \n    phase: \"Schlachtreife Bullen / Charolais\",\n    description: \"Endmast für optimale Schlachtqualität\",\n    ageMonths: \"26+ Monate\"\n  }\n];\n\n// Function to get nutrition data for specific weight\nexport const getCattleNutritionForWeight = (weight) => {\n  // Find the closest weight match\n  let closest = cattleNutritionData[0];\n  let minDiff = Math.abs(weight - closest.gewichtKg);\n  \n  for (const data of cattleNutritionData) {\n    const diff = Math.abs(weight - data.gewichtKg);\n    if (diff < minDiff) {\n      minDiff = diff;\n      closest = data;\n    }\n  }\n  \n  // If weight is between two values, interpolate\n  if (weight !== closest.gewichtKg) {\n    const sortedData = [...cattleNutritionData].sort((a, b) => a.gewichtKg - b.gewichtKg);\n    \n    for (let i = 0; i < sortedData.length - 1; i++) {\n      const lower = sortedData[i];\n      const upper = sortedData[i + 1];\n      \n      if (weight >= lower.gewichtKg && weight <= upper.gewichtKg) {\n        const ratio = (weight - lower.gewichtKg) / (upper.gewichtKg - lower.gewichtKg);\n        \n        return {\n          gewichtKg: weight,\n          tmKg: Math.round((lower.tmKg + (upper.tmKg - lower.tmKg) * ratio) * 10) / 10,\n          tdnKg: Math.round((lower.tdnKg + (upper.tdnKg - lower.tdnKg) * ratio) * 10) / 10,\n          dcpKg: Math.round((lower.dcpKg + (upper.dcpKg - lower.dcpKg) * ratio) * 100) / 100,\n          phase: weight <= 350 ? lower.phase : upper.phase,\n          description: weight <= 350 ? lower.description : upper.description,\n          ageMonths: weight <= 350 ? lower.ageMonths : upper.ageMonths,\n          interpolated: true\n        };\n      }\n    }\n  }\n  \n  return closest;\n};\n\n// Function to calculate feed requirements\nexport const calculateCattleFeedRequirements = (weight, nutritionData) => {\n  const { tmKg, tdnKg, dcpKg } = nutritionData;\n  \n  // Convert to different feed types\n  const feedRequirements = {\n    // Trockenmasse gesamt\n    totalDryMatter: tmKg,\n    \n    // Heu (ca. 85% TM, 50% TDN, 8% Rohprotein)\n    hayKg: Math.round((tmKg * 0.6) * 10) / 10,\n    \n    // Kraftfutter (ca. 88% TM, 75% TDN, 16% Rohprotein)\n    concentrateKg: Math.round((tmKg * 0.4) * 10) / 10,\n    \n    // Silage (ca. 35% TM, 65% TDN, 12% Rohprotein)\n    silageKg: Math.round((tmKg / 0.35) * 10) / 10,\n    \n    // Wasser (ca. 3-4 Liter pro kg TM)\n    waterLiters: Math.round(tmKg * 3.5),\n    \n    // Energiebedarf in MJ ME (Metabolizable Energy)\n    energyMJ: Math.round(tdnKg * 18.4), // 1 kg TDN ≈ 18.4 MJ ME\n    \n    // Proteinbedarf\n    proteinKg: dcpKg,\n    \n    // Tägliche Kosten (grobe Schätzung)\n    dailyCostEuro: Math.round((tmKg * 0.25 + dcpKg * 2.5) * 100) / 100\n  };\n  \n  return feedRequirements;\n};\n\n// Nutrition explanations\nexport const nutritionExplanations = {\n  tm: {\n    name: \"Trockenmasse (TM)\",\n    description: \"Gesamtmenge an Futter ohne Wassergehalt\",\n    unit: \"kg/Tag\",\n    importance: \"Basis für alle Futterberechnungen\"\n  },\n  tdn: {\n    name: \"Total Digestible Nutrients (TDN)\",\n    description: \"Verdauliche Nährstoffe für Energieversorgung\",\n    unit: \"kg/Tag\",\n    importance: \"Energiequelle für Wachstum und Erhaltung\"\n  },\n  dcp: {\n    name: \"Digestible Crude Protein (DCP)\",\n    description: \"Verdauliches Rohprotein für Muskelaufbau\",\n    unit: \"kg/Tag\",\n    importance: \"Essentiell für Wachstum und Fleischqualität\"\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
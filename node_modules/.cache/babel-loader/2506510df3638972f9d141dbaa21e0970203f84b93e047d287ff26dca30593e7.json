{"ast":null,"code":"// Calculation utilities for animal calorie and nutrition needs\n\nexport const calculateCalories = (animal, weight) => {\n  if (!animal || !weight || weight <= 0) return 0;\n\n  // Base calculation: weight × multiplier\n  const baseCalories = weight * animal.calorieMultiplier;\n\n  // Add some variation based on animal type\n  let adjustedCalories = baseCalories;\n\n  // Larger animals are more efficient (lower calories per kg)\n  if (weight > 1000) {\n    adjustedCalories *= 0.9;\n  } else if (weight < 50) {\n    adjustedCalories *= 1.2; // Smaller animals need more calories per kg\n  }\n  return Math.round(adjustedCalories);\n};\nexport const calculateMeatNeeds = (animal, weight, totalCalories) => {\n  if (!animal || !weight || !totalCalories) {\n    return 0;\n  }\n\n  // Only carnivores and omnivores need meat\n  if (animal.diet === 'herbivore') {\n    return 0;\n  }\n\n  // Meat provides approximately 2000-2500 calories per kg\n  const caloriesPerKgMeat = 2200;\n\n  // Calculate meat percentage of diet\n  let meatPercentage = animal.meatPercentage || 85;\n\n  // For omnivores, use lower meat percentage if not specified\n  if (animal.diet === 'omnivore' && !animal.meatPercentage) {\n    meatPercentage = 40; // Default for omnivores\n  }\n  const meatCalories = totalCalories * meatPercentage / 100;\n\n  // Convert to grams\n  const meatKg = meatCalories / caloriesPerKgMeat;\n  const meatGrams = meatKg * 1000;\n  return Math.round(meatGrams);\n};\nexport const calculateBMI = (weight, height) => {\n  if (!weight || !height || weight <= 0 || height <= 0) return 0;\n\n  // BMI = weight (kg) / height (m)²\n  const bmi = weight / (height * height);\n  return Math.round(bmi * 10) / 10;\n};\nexport const getBMICategory = (bmi, animal) => {\n  if (!bmi || !animal) return {\n    category: 'Unknown',\n    color: 'text-gray-500'\n  };\n\n  // These are very rough estimates for animals - in reality, each species has different healthy ranges\n  const avgWeight = (animal.averageWeight.min + animal.averageWeight.max) / 2;\n  const avgHeight = (animal.averageHeight.min + animal.averageHeight.max) / 2;\n  const normalBMI = avgWeight / (avgHeight * avgHeight);\n  const ratio = bmi / normalBMI;\n  if (ratio < 0.8) {\n    return {\n      category: 'Underweight',\n      color: 'text-blue-600'\n    };\n  } else if (ratio < 1.2) {\n    return {\n      category: 'Normal',\n      color: 'text-green-600'\n    };\n  } else if (ratio < 1.4) {\n    return {\n      category: 'Overweight',\n      color: 'text-yellow-600'\n    };\n  } else {\n    return {\n      category: 'Obese',\n      color: 'text-red-600'\n    };\n  }\n};\nexport const calculateWaterNeeds = (weight, calories) => {\n  // Rough estimate: animals need about 2-4 ml of water per calorie\n  // Plus base water needs\n  const waterPerCalorie = 3; // ml per calorie\n  const baseWater = weight * 30; // 30ml per kg base\n\n  const totalWater = calories * waterPerCalorie + baseWater;\n  return Math.round(totalWater / 1000 * 10) / 10; // Convert to liters, round to 1 decimal\n};\nexport const getFeedingRecommendations = (animal, weight, calories) => {\n  const recommendations = [];\n  if (animal.diet === 'herbivore') {\n    const vegetationKg = Math.round(calories / 3000); // Rough estimate: 3000 cal/kg vegetation\n    recommendations.push(`${vegetationKg}kg of mixed vegetation daily`);\n    recommendations.push('Provide hay, grass, leaves, and fruits');\n    recommendations.push('Feed in multiple small portions throughout the day');\n  } else if (animal.diet === 'carnivore') {\n    const meatGrams = calculateMeatNeeds(animal, weight, calories);\n    recommendations.push(`${meatGrams}g of fresh meat daily`);\n    recommendations.push('Vary between different meat types');\n    recommendations.push('Include bones for dental health');\n    recommendations.push('Feed once or twice daily');\n  }\n  const waterLiters = calculateWaterNeeds(weight, calories);\n  recommendations.push(`Provide ${waterLiters}L of fresh water daily`);\n  return recommendations;\n};","map":{"version":3,"names":["calculateCalories","animal","weight","baseCalories","calorieMultiplier","adjustedCalories","Math","round","calculateMeatNeeds","totalCalories","diet","caloriesPerKgMeat","meatPercentage","meatCalories","meatKg","meatGrams","calculateBMI","height","bmi","getBMICategory","category","color","avgWeight","averageWeight","min","max","avgHeight","averageHeight","normalBMI","ratio","calculateWaterNeeds","calories","waterPerCalorie","baseWater","totalWater","getFeedingRecommendations","recommendations","vegetationKg","push","waterLiters"],"sources":["/Users/ginoanayamendoza/client/src/utils/calculations.js"],"sourcesContent":["// Calculation utilities for animal calorie and nutrition needs\n\nexport const calculateCalories = (animal, weight) => {\n  if (!animal || !weight || weight <= 0) return 0;\n  \n  // Base calculation: weight × multiplier\n  const baseCalories = weight * animal.calorieMultiplier;\n  \n  // Add some variation based on animal type\n  let adjustedCalories = baseCalories;\n  \n  // Larger animals are more efficient (lower calories per kg)\n  if (weight > 1000) {\n    adjustedCalories *= 0.9;\n  } else if (weight < 50) {\n    adjustedCalories *= 1.2; // Smaller animals need more calories per kg\n  }\n  \n  return Math.round(adjustedCalories);\n};\n\nexport const calculateMeatNeeds = (animal, weight, totalCalories) => {\n  if (!animal || !weight || !totalCalories) {\n    return 0;\n  }\n  \n  // Only carnivores and omnivores need meat\n  if (animal.diet === 'herbivore') {\n    return 0;\n  }\n  \n  // Meat provides approximately 2000-2500 calories per kg\n  const caloriesPerKgMeat = 2200;\n  \n  // Calculate meat percentage of diet\n  let meatPercentage = animal.meatPercentage || 85;\n  \n  // For omnivores, use lower meat percentage if not specified\n  if (animal.diet === 'omnivore' && !animal.meatPercentage) {\n    meatPercentage = 40; // Default for omnivores\n  }\n  \n  const meatCalories = (totalCalories * meatPercentage) / 100;\n  \n  // Convert to grams\n  const meatKg = meatCalories / caloriesPerKgMeat;\n  const meatGrams = meatKg * 1000;\n  \n  return Math.round(meatGrams);\n};\n\nexport const calculateBMI = (weight, height) => {\n  if (!weight || !height || weight <= 0 || height <= 0) return 0;\n  \n  // BMI = weight (kg) / height (m)²\n  const bmi = weight / (height * height);\n  return Math.round(bmi * 10) / 10;\n};\n\nexport const getBMICategory = (bmi, animal) => {\n  if (!bmi || !animal) return { category: 'Unknown', color: 'text-gray-500' };\n  \n  // These are very rough estimates for animals - in reality, each species has different healthy ranges\n  const avgWeight = (animal.averageWeight.min + animal.averageWeight.max) / 2;\n  const avgHeight = (animal.averageHeight.min + animal.averageHeight.max) / 2;\n  const normalBMI = avgWeight / (avgHeight * avgHeight);\n  \n  const ratio = bmi / normalBMI;\n  \n  if (ratio < 0.8) {\n    return { category: 'Underweight', color: 'text-blue-600' };\n  } else if (ratio < 1.2) {\n    return { category: 'Normal', color: 'text-green-600' };\n  } else if (ratio < 1.4) {\n    return { category: 'Overweight', color: 'text-yellow-600' };\n  } else {\n    return { category: 'Obese', color: 'text-red-600' };\n  }\n};\n\nexport const calculateWaterNeeds = (weight, calories) => {\n  // Rough estimate: animals need about 2-4 ml of water per calorie\n  // Plus base water needs\n  const waterPerCalorie = 3; // ml per calorie\n  const baseWater = weight * 30; // 30ml per kg base\n  \n  const totalWater = (calories * waterPerCalorie) + baseWater;\n  return Math.round(totalWater / 1000 * 10) / 10; // Convert to liters, round to 1 decimal\n};\n\nexport const getFeedingRecommendations = (animal, weight, calories) => {\n  const recommendations = [];\n  \n  if (animal.diet === 'herbivore') {\n    const vegetationKg = Math.round(calories / 3000); // Rough estimate: 3000 cal/kg vegetation\n    recommendations.push(`${vegetationKg}kg of mixed vegetation daily`);\n    recommendations.push('Provide hay, grass, leaves, and fruits');\n    recommendations.push('Feed in multiple small portions throughout the day');\n  } else if (animal.diet === 'carnivore') {\n    const meatGrams = calculateMeatNeeds(animal, weight, calories);\n    recommendations.push(`${meatGrams}g of fresh meat daily`);\n    recommendations.push('Vary between different meat types');\n    recommendations.push('Include bones for dental health');\n    recommendations.push('Feed once or twice daily');\n  }\n  \n  const waterLiters = calculateWaterNeeds(weight, calories);\n  recommendations.push(`Provide ${waterLiters}L of fresh water daily`);\n  \n  return recommendations;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}